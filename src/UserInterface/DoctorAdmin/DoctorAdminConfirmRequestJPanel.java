/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorAdmin;

import Business.Drone.Drone;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.DroneOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.VitalSign;
import Business.QuickAssist;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientDoctorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sanka_001
 */
public class DoctorAdminConfirmRequestJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    QuickAssist system;
    UserAccount account;
    VitalSign patientVitalSign;
    PatientDoctorWorkRequest patientDoctorRequest;
    Enterprise enterprise;
    Employee assignedDoctor;
    Drone assignedDrone;
    Patient assignedPatient;
    double distanceToPatient;
    double droneLong;
    double droneLat;
    double patLong;
    double patLat;
    double eta;

    /**
     * Creates new form PharmacyConfirmRequestJPanel
     */
    public DoctorAdminConfirmRequestJPanel(JPanel userProcessContainer, QuickAssist system, Enterprise enterprise, UserAccount account, PatientDoctorWorkRequest patientDocRequest) {
        initComponents();
        this.setBackground(Color.white);
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.account = account;
        this.assignedDoctor = assignedDoctor;
        this.patientDoctorRequest = (PatientDoctorWorkRequest) patientDocRequest;
        this.enterprise = enterprise;
        disableTextFields();
        setVitalSignFields();
        populateDroneTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRequestDrone = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtSBP = new javax.swing.JTextField();
        lblTimeStamp = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        txtHeartRate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrone = new javax.swing.JTable();
        btnSelectDrone = new javax.swing.JButton();
        lblDBP = new javax.swing.JLabel();
        lblWeight = new javax.swing.JLabel();
        lblTemperature = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblDroneETA = new javax.swing.JLabel();
        txtDBP = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        lblSBP = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblAvailablity = new javax.swing.JLabel();

        btnRequestDrone.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnRequestDrone.setText("Send DroneReq");
        btnRequestDrone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestDroneActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("Temperature");

        txtWeight.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtWeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtWeightKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Weight");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setText("Time Stamp:");

        txtSBP.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtSBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSBPActionPerformed(evt);
            }
        });
        txtSBP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSBPKeyPressed(evt);
            }
        });

        lblTimeStamp.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Systolic B.P");

        txtTemperature.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtTemperature.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTemperatureKeyPressed(evt);
            }
        });

        txtHeartRate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtHeartRate.setText(" ");
        txtHeartRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHeartRateKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setText("Heart Rate");

        jLabel1.setText("DoctorAdminConfirmRequest");

        tblDrone.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tblDrone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drone Address", "Drone Name", "Distance From Patient"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDrone);
        if (tblDrone.getColumnModel().getColumnCount() > 0) {
            tblDrone.getColumnModel().getColumn(0).setResizable(false);
            tblDrone.getColumnModel().getColumn(1).setResizable(false);
            tblDrone.getColumnModel().getColumn(2).setResizable(false);
        }

        btnSelectDrone.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSelectDrone.setText("Select Drone");
        btnSelectDrone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDroneActionPerformed(evt);
            }
        });

        lblDBP.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblDBP.setText("  ");

        lblWeight.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblWeight.setText("  ");

        lblTemperature.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblTemperature.setText("  ");

        lblHeartRate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblHeartRate.setText("  ");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("Drone ETA:");

        lblDroneETA.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        txtDBP.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtDBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDBPActionPerformed(evt);
            }
        });
        txtDBP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDBPKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel10.setText("Diastolic B.P");

        lblSBP.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblSBP.setText("  ");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Availability: ");

        lblAvailablity.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblAvailablity.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(lblAvailablity, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblTimeStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(115, 115, 115)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtDBP, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblDBP, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSBP, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addComponent(lblSBP, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(841, 841, 841)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblDroneETA, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(230, 230, 230)
                                        .addComponent(btnSelectDrone))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRequestDrone)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel10)
                                            .addComponent(txtDBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDBP))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(txtSBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblSBP)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblWeight))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblHeartRate))
                                            .addComponent(jLabel6))
                                        .addGap(37, 37, 37)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel7)
                                            .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lblTemperature))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblTimeStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(btnSelectDrone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(lblDroneETA, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRequestDrone)
                    .addComponent(btnBack))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblAvailablity))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void disableTextFields() {
        txtSBP.setEditable(false);
        txtHeartRate.setEditable(false);
        txtDBP.setEditable(false);
        txtTemperature.setEditable(false);
        txtWeight.setEditable(false);

    }

    private static double droneToPatientDistance(double lat1, double lon1, double lat2, double lon2, String unit) {
        double theta = lon1 - lon2;
        double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
        dist = Math.acos(dist);
        dist = rad2deg(dist);
        dist = dist * 60 * 1.1515;
        if (unit == "K") {
            dist = dist * 1.609344;
        } else if (unit == "M") {
            dist = dist;
        }

        return (dist);
    }

    //	This function converts decimal degrees to radians	
    private static double deg2rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    //	This function converts radians to decimal degrees	
    private static double rad2deg(double rad) {
        return (rad * 180 / Math.PI);
    }

    public double patientDroneDistance(double droneLongitude, double droneLatitude) {

        double patLongitude = assignedPatient.getLongitude();
        double patLatitude = assignedPatient.getLatitude();
        double droneLong = droneLongitude;
        double droneLat = droneLatitude;
        double distanceinMiles = droneToPatientDistance(patLongitude, patLatitude, droneLong, droneLat, "M");
        return distanceToPatient = distanceinMiles;
    }

    private void populateDroneTable() {

        DefaultTableModel model = (DefaultTableModel) tblDrone.getModel();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof DroneOrganization) {
                for (Drone drone : org.getDroneDirectory().getDroneList()) {
                    double droneLong = drone.getLongitude();
                    double droneLat = drone.getLatitude();
                    distanceToPatient = patientDroneDistance(droneLong, droneLat);
                    Object[] row = new Object[3];
                    row[0] = drone;
                    row[1] = drone.getAddress();
                    row[2] = distanceToPatient;
                    model.addRow(row);

                }
            }
        }
        tblDrone.setAutoCreateRowSorter(true);

    }

    private void setVitalSignFields() {
        assignedPatient = patientDoctorRequest.getAssignedPatient();
        int size = patientDoctorRequest.getAssignedPatient().getVitalSignDirectory().getVitalSignList().size();
        patientVitalSign = patientDoctorRequest.getAssignedPatient().getVitalSignDirectory().getVitalSignList().get(size - 1);
        txtSBP.setText(String.valueOf(patientVitalSign.getsBloodPressure()));
        txtHeartRate.setText(String.valueOf(patientVitalSign.getHeartRate()));
        txtDBP.setText(String.valueOf(patientVitalSign.getdBloodPressure()));
        txtTemperature.setText(String.valueOf(patientVitalSign.getTemperature()));
        txtWeight.setText(String.valueOf(patientVitalSign.getWeight()));
        lblTimeStamp.setText(String.valueOf(patientVitalSign.getTimeStamp()));

    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        TakeRequestJPanel dwajp = (TakeRequestJPanel) component;
        dwajp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRequestDroneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestDroneActionPerformed
        //Validation No.1(Select all fields)
        int count = 0;
        if (txtSBP.getText().trim().isEmpty()) {
            count++;
        }
        if (txtHeartRate.getText().trim().isEmpty()) {
            count++;
        }
        if (txtDBP.getText().trim().isEmpty()) {
            count++;
        }
        if (txtTemperature.getText().trim().isEmpty()) {
            count++;
        }
        if (txtWeight.getText().trim().isEmpty()) {
            count++;

        }

        if (count > 0) {
            JOptionPane.showMessageDialog(null, "Please enter all the details", "Information", JOptionPane.ERROR_MESSAGE);
        }

        assignedDoctor = patientDoctorRequest.getReceiver().getEmployee();
        patientDoctorRequest.setSender(account);
        patientDoctorRequest.setStatus("Drone shortly taking off");
        patientDoctorRequest.setReceiver(assignedDoctor.getUserAccount());
        patientDoctorRequest.setAssignedPatient(patientDoctorRequest.getSender().getPatient());
        patientDoctorRequest.setAssignedDrone(assignedDrone);
        patientDoctorRequest.setAssignedDoctor(assignedDoctor);
        patientDoctorRequest.setAssignedPatient(assignedPatient);
        patientDoctorRequest.setEta(eta);
        assignedDrone.setAvailability(false);
        Organization org = null;

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorOrganization) {
                org = (DoctorOrganization) organization;
                break;
            }

        }

        if (org != null) {
            for (Employee doc : org.getEmployeeDirectory().getEmployeeList()) {
                if (doc == assignedDoctor) {
                    org.getWorkQueue().getWorkRequestList().add(patientDoctorRequest);
                    doc.getUserAccount().getWorkQueue().getWorkRequestList().add(patientDoctorRequest);
                    for (Employee e : org.getEmployeeDirectory().getEmployeeList()) {
                        e.getFirstName();
                    }
                }
            }
        }
//        

    }//GEN-LAST:event_btnRequestDroneActionPerformed

    private void btnSelectDroneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDroneActionPerformed
        int selectedRow = tblDrone.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a drone!");
        } else {
              assignedDrone = (Drone) tblDrone.getValueAt(selectedRow, 0);
             if (assignedDrone.isAvailability() == true) {
            lblAvailablity.setText("Drone available");
            DecimalFormat df = new DecimalFormat("##.##");
            df.setRoundingMode(RoundingMode.DOWN);
            eta = (distanceToPatient / 125) * 60;
          
            distanceToPatient = (double) tblDrone.getModel().getValueAt(selectedRow, 2);
            patientDoctorRequest.setAssignedDrone(assignedDrone);
             
             } else {
            lblAvailablity.setText("Drone unavailable");
        }
        }

        

        lblDroneETA.setText(((String.valueOf(eta)) + " minutes"));

    }//GEN-LAST:event_btnSelectDroneActionPerformed

    private void txtSBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSBPActionPerformed

    }//GEN-LAST:event_txtSBPActionPerformed

    private void txtSBPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSBPKeyPressed
        // Validation No. 2
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9) || (key == evt.VK_BACK_SPACE)) {
            txtSBP.setEditable(true);
            txtSBP.setBackground(Color.white);
            lblSBP.setText("");
        } else {
            txtSBP.setEditable(false);
            txtSBP.setBackground(Color.yellow);
            lblSBP.setText("Please enter only numeric B.P");
        }
    }//GEN-LAST:event_txtSBPKeyPressed

    private void txtWeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWeightKeyPressed
        // Validation No. 2
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9) || (key == evt.VK_BACK_SPACE)) {
            txtWeight.setEditable(true);
            txtWeight.setBackground(Color.white);
            lblWeight.setText("");
        } else {
            txtWeight.setEditable(false);
            txtWeight.setBackground(Color.yellow);
            lblWeight.setText("Please enter only numeric age");
        }
    }//GEN-LAST:event_txtWeightKeyPressed

    private void txtHeartRateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeartRateKeyPressed
        // Validation No. 2
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9) || (key == evt.VK_BACK_SPACE)) {
            txtHeartRate.setEditable(true);
            txtHeartRate.setBackground(Color.white);
            lblHeartRate.setText("");
        } else {
            txtHeartRate.setEditable(false);
            txtHeartRate.setBackground(Color.yellow);
            lblHeartRate.setText("Please enter only numeric age");
        }
    }//GEN-LAST:event_txtHeartRateKeyPressed

    private void txtTemperatureKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTemperatureKeyPressed
        // Validation No. 2
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9) || (key == evt.VK_BACK_SPACE)) {
            txtTemperature.setEditable(true);
            txtTemperature.setBackground(Color.white);
            lblTemperature.setText("");
        } else {
            txtTemperature.setEditable(false);
            txtTemperature.setBackground(Color.yellow);
            lblTemperature.setText("Please enter only numeric age");
        }
    }//GEN-LAST:event_txtTemperatureKeyPressed

    private void txtDBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDBPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDBPActionPerformed

    private void txtDBPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDBPKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDBPKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRequestDrone;
    private javax.swing.JButton btnSelectDrone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvailablity;
    private javax.swing.JLabel lblDBP;
    private javax.swing.JLabel lblDroneETA;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblSBP;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JLabel lblTimeStamp;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTable tblDrone;
    private javax.swing.JTextField txtDBP;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtSBP;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
