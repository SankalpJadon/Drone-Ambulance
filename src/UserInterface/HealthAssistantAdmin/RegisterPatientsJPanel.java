/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.HealthAssistantAdmin;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Patient.VitalSign;
import Business.Patient.VitalSignDirectory;
import Business.QuickAssist;
import Business.Role.PatientRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sanka_001
 */
public class RegisterPatientsJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    QuickAssist system;
    String firstName;
    Enterprise enterprise;
    VitalSignDirectory vitalSignDirectory;
    String address;
    String sensorId;
    SecureRandom randomId;
    Network network;
    double longitude;
    double latitude;
    int age;
    int dBP;
    int sBP;
    int weight;
    int pulse;
    int heartRate;
    int temperature;
    int respRate;
    Date dateobj;
    VitalSign vitalSign;
    String condition = "Abnormal";
    Patient patient;

    /**
     * Creates new form RegisterPatientsJPanel
     */
    public RegisterPatientsJPanel(JPanel userProcessContainer, QuickAssist system, Enterprise enterprise) {
        initComponents();
        this.setBackground(Color.white);

        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.enterprise = enterprise;
        lblContactInfo.setEnabled(false);
        randomId = new SecureRandom();
        sensorId = nextSessionId();
        sensorId = sensorId.substring(0, Math.min(sensorId.length(), 7));
        txtSensorID.setText(sensorId);
        getLocation(42.358544, -71.16394, 8000);
        populateTable();
        Network network = findCity();
        lblCity.setText(network.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreatePatient = new javax.swing.JButton();
        txtUserName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        txtSensorID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        lblCity = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtEmergencyContact = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        lblContactInfo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblUserNameStatus = new javax.swing.JLabel();
        lblPatientStatus = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        btnCreatePatient.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnCreatePatient.setText("Create Patient");
        btnCreatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePatientActionPerformed(evt);
            }
        });

        txtUserName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtUserName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUserNameFocusLost(evt);
            }
        });
        txtUserName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtUserNameMouseExited(evt);
            }
        });
        txtUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUserNameKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Patient Name:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("User Name");

        txtFirstName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFirstNameFocusLost(evt);
            }
        });
        txtFirstName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtFirstNameMouseExited(evt);
            }
        });
        txtFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyTyped(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        txtSensorID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("Password");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Sensor ID:");

        txtAddress.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Address");

        tblPatient.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "SensorID", "Address", "UserName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatient);
        if (tblPatient.getColumnModel().getColumnCount() > 0) {
            tblPatient.getColumnModel().getColumn(0).setResizable(false);
            tblPatient.getColumnModel().getColumn(1).setResizable(false);
            tblPatient.getColumnModel().getColumn(2).setResizable(false);
            tblPatient.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel6.setText("QuickAssistant");

        btnBack.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtEmergencyContact.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtEmergencyContact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtEmergencyContactMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtEmergencyContactMouseExited(evt);
            }
        });
        txtEmergencyContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmergencyContactActionPerformed(evt);
            }
        });
        txtEmergencyContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmergencyContactKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("Emergency Contact");

        lblContactInfo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblContactInfo.setText("(In Case of emergency, this number will be notified about your health)");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Age");

        txtAge.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtAge.setText(" ");
        txtAge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtAgeMouseExited(evt);
            }
        });
        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAgeKeyPressed(evt);
            }
        });

        lblUserNameStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblUserNameStatus.setText("   ");

        lblPatientStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPatientStatus.setText("   ");

        lblAge.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblAge.setText("   ");

        lblPassword.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPassword.setText("   ");

        jLabel15.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel15.setText("   ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtSensorID, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtEmergencyContact, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                                            .addComponent(txtAge))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblContactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblUserNameStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(53, 53, 53)
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPatientStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreatePatient)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(619, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(163, 163, 163)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSensorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUserNameStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmergencyContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContactInfo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreatePatient)
                    .addComponent(btnBack)
                    .addComponent(btnDelete))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(460, Short.MAX_VALUE)
                    .addComponent(jLabel15)
                    .addGap(281, 281, 281)))
        );
    }// </editor-fold>//GEN-END:initComponents
    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();

        model.setRowCount(0);
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof PatientOrganization) {
                for (Patient pat : org.getPatientDirectory().getPatientList()) {
                    Object[] row = new Object[5];
                    row[0] = pat;
                    row[1] = pat.getSensorId();
                    row[2] = pat.getAddress();
                    row[3] = pat.getUserAccount().getUserName();
                    model.addRow(row);
                }
            }

        }

    }

    public Network findCity() {
        for (Network network1 : system.getNetworkList()) {
            for (Enterprise enterprise1 : network1.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise1 == enterprise) {
                    network = network1;
                }

            }
        }
        return network;
    }

    public void getLocation(double x0, double y0, int radius) {
        Random random = new Random();

        // Convert radius from meters to degrees
        double radiusInDegrees = radius / 111000f;

        double u = random.nextDouble();
        double v = random.nextDouble();
        double w = radiusInDegrees * Math.sqrt(u);
        double t = 2 * Math.PI * v;
        double x = w * Math.cos(t);
        double y = w * Math.sin(t);

        // Adjust the x-coordinate for the shrinking of the east-west distances
        double new_x = x / Math.cos(y0);

        longitude = new_x + x0;
        latitude = y + y0;
    }

    public String nextSessionId() {
        return new BigInteger(130, randomId).toString(32);
    }

    private int generatesBPValues() {

        //bloodPressure= (int) (Math.random()*100);
        Random r = new Random();
        int Low = 30;
        int High = 100;
        int Result = r.nextInt(High - Low) + Low;
        return Result;
    }

    private int generatedBPValues() {

        //bloodPressure= (int) (Math.random()*100);
        Random r = new Random();
        int Low = 30;
        int High = 100;
        int Result = r.nextInt(High - Low) + Low;
        return Result;
    }

    private int generateTemperatureValues() {

        //bloodPressure= (int) (Math.random()*100);
        Random r = new Random();
        int Low = 30;
        int High = 100;
        int Result = r.nextInt(High - Low) + Low;
        return Result;
    }

    private int generateRespRateValues() {

        //bloodPressure= (int) (Math.random()*100);
        Random r = new Random();
        int Low = 30;
        int High = 100;
        int Result = r.nextInt(High - Low) + Low;
        return Result;
    }

    private int generateWeightValues() {

        //bloodPressure= (int) (Math.random()*100);
        Random r = new Random();
        int Low = 30;
        int High = 100;
        int Result = r.nextInt(High - Low) + Low;
        return Result;
    }

    private int generateHeartRateValues() {

        //bloodPressure= (int) (Math.random()*100);
        Random r = new Random();
        int Low = 30;
        int High = 100;
        int Result = r.nextInt(High - Low) + Low;
        return Result;
    }

    private void generateVitalSigns() {
        dBP = generatedBPValues();
        sBP = generatesBPValues();
        heartRate = generateHeartRateValues();
        for (VitalSign vs : patient.getVitalSignDirectory().getVitalSignList()) {
            if (vs.getWeight() == 0) {
                weight = generateWeightValues();
            } else {
                weight = vs.getWeight();
            }

        }
        temperature = generateTemperatureValues();
        respRate = generateRespRateValues();
        dateobj = new Date();
        normalAbnormal(age);
        vitalSign = patient.getVitalSignDirectory().createAndAddVitalSign(dBP, weight, sBP, heartRate, respRate, temperature, dateobj, condition);

    }

    public static boolean isBetween(int x, int lower, int upper) {
        return lower <= x && x <= upper;
    }

    public void normalAbnormal(int age) {

        if (isBetween(age, 5, 12)) {

            if ((respRate > 19 && respRate < 31) && (heartRate > 40 && heartRate < 150) && (sBP > 60 && sBP < 150) && (dBP < 50 && dBP > 80) && (weight > 10 && weight < 40) && (temperature > 99 && temperature < 103)) {
                condition = "Normal";
            }

        } else if (isBetween(age, 13, 30)) {
            if ((respRate > 11 && respRate < 31) && (heartRate > 30 && heartRate < 150) && (sBP > 90 && sBP < 150) && (weight > 65) && (dBP < 50 && dBP > 80) && (temperature > 99 && temperature < 104)) {
                condition = "Normal";
            }

        } else if (isBetween(age, 31, 100)) {
            if ((respRate > 11 && respRate < 31) && (heartRate > 30 && heartRate < 150) && (sBP > 95 && sBP < 150) && (dBP < 50 && dBP > 80) && (weight > 110) && (temperature > 99 && temperature < 104)) {
                condition = "Normal";
            }
        }
    }

    private void btnCreatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePatientActionPerformed

        firstName = txtFirstName.getText();
        address = txtAddress.getText();
        UserAccount patientUserAccount = null;

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof PatientOrganization) {
                for (Role role : org.getSupportedRole()) {
                    if (role instanceof PatientRole) {

                        patient = org.getPatientDirectory().createPatient(firstName, sensorId, address);
                        patient.setAddress(address);
                        patient.setSensorId(sensorId);
                        patient.setLongitude(longitude);
                        patient.setLatitude(latitude);
                        patient.setEmergencyPhone("8572944202");
                        patient.setAge(Integer.parseInt(txtAge.getText().trim()));
                        patientUserAccount = org.getUserAccountDirectory().createPatientUserAccount(txtUserName.getText(), txtPassword.getText(), patient, role);
                        patient.setUserAccount(patientUserAccount);
//                        org.getUserAccountDirectory().createPatientUserAccount(firstName, sensorId, patient, role);
                        generateVitalSigns();
                    }
                }
            }
        }
        populateTable();
        randomId = new SecureRandom();
        sensorId = nextSessionId();
        sensorId = sensorId.substring(0, Math.min(sensorId.length(), 7));
        txtSensorID.setText(sensorId);

    }//GEN-LAST:event_btnCreatePatientActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblPatient.getSelectedRow();
        if (selectedRow >= 0) {

            Patient patient = (Patient) tblPatient.getValueAt(selectedRow, 0);

            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof PatientOrganization) {
                    for (Role role : org.getSupportedRole()) {
                        if (role instanceof PatientRole) {

                            org.getPatientDirectory().deletePatient(patient);

                        }
                    }

                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter all the details", "Information", JOptionPane.ERROR_MESSAGE);
        }
        populateTable();

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtEmergencyContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmergencyContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmergencyContactActionPerformed

    private void txtEmergencyContactMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmergencyContactMouseEntered
        // TODO add your handling code here:
        lblContactInfo.setEnabled(true);
    }//GEN-LAST:event_txtEmergencyContactMouseEntered

    private void txtFirstNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyPressed
        char percharacter = evt.getKeyChar();
        if (percharacter >= 65 && percharacter < 90 || percharacter >= 97 && percharacter <= 122 || percharacter == 32 || percharacter == 8) {
            lblPatientStatus.setText("");
            txtFirstName.setEditable(true);
            txtFirstName.setBackground(Color.white);
        } else {
            evt.consume();
            lblPatientStatus.setText("Patient name can only be alphabetic");
            txtFirstName.setEditable(false);
            txtFirstName.setBackground(Color.yellow);
        }
    }//GEN-LAST:event_txtFirstNameKeyPressed

    private void txtFirstNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyTyped
        
    }//GEN-LAST:event_txtFirstNameKeyTyped

    private void txtUserNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserNameKeyTyped
         
    }//GEN-LAST:event_txtUserNameKeyTyped

    private void txtEmergencyContactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmergencyContactKeyPressed
        char percharacter = evt.getKeyChar();
        if (percharacter >= 48 && percharacter < 58 || percharacter == 8) {
            lblContactInfo.setText("");
            txtEmergencyContact.setEditable(true);
            txtEmergencyContact.setBackground(Color.white);
        } else {
            evt.consume();
            lblContactInfo.setText("Please enter only numeric phone number");
            txtEmergencyContact.setEditable(false);
            txtEmergencyContact.setBackground(Color.yellow);
         }
    }//GEN-LAST:event_txtEmergencyContactKeyPressed

    private void txtAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyPressed
       char percharacter = evt.getKeyChar();
        if (percharacter >= 48 && percharacter < 58 || percharacter == 8) {
            lblAge.setText("");
            txtAge.setEditable(true);
            txtAge.setBackground(Color.white);
        } else {
            evt.consume();
            lblAge.setText("Please enter only numeric age");
            txtAge.setEditable(false);
            txtAge.setBackground(Color.yellow);
        }
    }//GEN-LAST:event_txtAgeKeyPressed

    private void txtFirstNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNameFocusLost
         txtFirstName.setBackground(Color.white);
        lblPatientStatus.setText("");
    }//GEN-LAST:event_txtFirstNameFocusLost

    private void txtUserNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserNameFocusLost
        
    }//GEN-LAST:event_txtUserNameFocusLost

    private void txtEmergencyContactMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmergencyContactMouseExited
        txtEmergencyContact.setBackground(Color.white);
        lblContactInfo.setText("In Case of emergency, this number will be notified about your health");
    }//GEN-LAST:event_txtEmergencyContactMouseExited

    private void txtAgeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAgeMouseExited
         txtAge.setBackground(Color.white);
        lblAge.setText("");
    }//GEN-LAST:event_txtAgeMouseExited

    private void txtFirstNameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFirstNameMouseExited
        txtFirstName.setBackground(Color.white);
        lblPatientStatus.setText("");
    }//GEN-LAST:event_txtFirstNameMouseExited

    private void txtUserNameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtUserNameMouseExited
         txtUserName.setBackground(Color.white);
        lblUserNameStatus.setText("");
    }//GEN-LAST:event_txtUserNameMouseExited

    private void txtUserNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserNameKeyPressed
        char percharacter = evt.getKeyChar();
        if (percharacter >= 65 && percharacter < 90 || percharacter >= 97 && percharacter <= 122 || percharacter == 32 || percharacter == 8||(percharacter >= 48 && percharacter < 58)) {
            lblUserNameStatus.setText("");
            txtUserName.setEditable(true);
            txtUserName.setBackground(Color.white);
        } else {
            evt.consume();
            lblUserNameStatus.setText("Please enter alphabets or numbers or combination");
            txtUserName.setEditable(false);
            txtUserName.setBackground(Color.yellow);
        }
    }//GEN-LAST:event_txtUserNameKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePatient;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblContactInfo;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPatientStatus;
    private javax.swing.JLabel lblUserNameStatus;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmergencyContact;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtSensorID;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
