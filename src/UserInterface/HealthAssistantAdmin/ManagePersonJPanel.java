/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.HealthAssistantAdmin;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.DroneOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.QuickAssist;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.math.BigInteger;
import java.security.SecureRandom;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sanka_001
 */
public class ManagePersonJPanel extends javax.swing.JPanel {

    QuickAssist system;
    JPanel userProcessContainer;
    Enterprise enterprise;
    SecureRandom randomId;
    int empId;
    String sensorId;
    Organization organization;
    
    /**
     * Creates new form ManagePersonJPanel
     */
    public ManagePersonJPanel(JPanel userProcessContainer, QuickAssist system, Enterprise enterprise) {
        initComponents();
        this.setBackground(Color.white);
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.enterprise = enterprise;
        randomId = new SecureRandom();

        sensorId = nextSessionId();
        sensorId = sensorId.substring(0, Math.min(sensorId.length(), 7));
        //txtSensorId.setText(sensorId);
        // populateCmbOrganization1();
        populateCmbOrganization2();
        populateEmployeeTable();
        txtEmployeeAddress.setEditable(false);
        txtName.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        cmbOrganization2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrganizations = new javax.swing.JTable();
        btnCreatePerson = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtEmployeeAddress = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblAdminNameStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Admin Name");

        txtName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtNameMouseExited(evt);
            }
        });
        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNameKeyPressed(evt);
            }
        });

        cmbOrganization2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbOrganization2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrganization2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Organization Name: ");

        tblOrganizations.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tblOrganizations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admin Name", "ID", "Organization Name", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOrganizations);
        if (tblOrganizations.getColumnModel().getColumnCount() > 0) {
            tblOrganizations.getColumnModel().getColumn(0).setResizable(false);
            tblOrganizations.getColumnModel().getColumn(1).setResizable(false);
            tblOrganizations.getColumnModel().getColumn(2).setResizable(false);
            tblOrganizations.getColumnModel().getColumn(3).setResizable(false);
        }

        btnCreatePerson.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnCreatePerson.setText("Create User Account");
        btnCreatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePersonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("Address");

        txtEmployeeAddress.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButton1.setText("Existing Admin Accounts");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAdminNameStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblAdminNameStatus.setText("   ");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Manage Admins");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBack))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(29, 29, 29)
                                        .addComponent(btnCreatePerson)
                                        .addGap(100, 100, 100)
                                        .addComponent(btnDelete))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cmbOrganization2, 0, 262, Short.MAX_VALUE)
                                            .addComponent(txtName)
                                            .addComponent(txtEmployeeAddress))
                                        .addGap(75, 75, 75)
                                        .addComponent(lblAdminNameStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbOrganization2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAdminNameStatus))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmployeeAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreatePerson)
                    .addComponent(jButton1)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addGap(48, 48, 48))
        );
    }// </editor-fold>//GEN-END:initComponents

    public String nextSessionId() {
        return new BigInteger(130, randomId).toString(32);
    }

    private void populateEmployeeTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblOrganizations.getModel();
        dtm.setRowCount(0);
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (!((org instanceof PatientOrganization) || (org instanceof DoctorOrganization))) {
                for (Employee emp : org.getEmployeeDirectory().getEmployeeList()) {
                    Object[] row = new Object[4];
                    row[0] = emp;
                    row[1] = emp.getEmpId();
                    row[2] = org.getName();
                    row[3] = emp.getAddress();

                    dtm.addRow(row);
                }
            }
        }
    }

    private void populateCmbOrganization2() {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (!((org instanceof PatientOrganization) || (org instanceof DoctorOrganization) || (org instanceof DroneOrganization))) {
                cmbOrganization2.addItem(org);
            }

        }
    }

    private void btnCreatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePersonActionPerformed
       boolean exists=true;
        String name = txtName.getText();
        String address = txtEmployeeAddress.getText();
        int count = 0;
            if (txtEmployeeAddress.getText().trim().isEmpty()) {
                count++;
            }
            if (txtName.getText().trim().isEmpty()) {
                count++;
            }
        if(count==0){
         if(organization.getName().equalsIgnoreCase(Organization.Type.DroneWarehouseAdmin.getValue()))
         {
             for(UserAccount userAccount:organization.getUserAccountDirectory().getUserAccountList())
             {
                 if(userAccount.getRole().toString().equalsIgnoreCase(Role.RoleType.DroneWarehouse.toString()))
                 {
                     exists=false;
                 }
             }
                 
         }
        /*for(Employee emp: organization.getEmployeeDirectory().getEmployeeList()){
            if(orga){
                JOptionPane.showMessageDialog(null, "User Already Exists");
                
            }
            else{
                
                Employee employee = organization.getEmployeeDirectory().createEmployee(name,empId, address);
  
                
            }  
            }*/
  
      
      
        
      if(exists){
        populateEmployeeTable();

        ManageUserAccountJPanel manageUserJPanel = new ManageUserAccountJPanel(userProcessContainer, system, enterprise, organization);
        userProcessContainer.add("ManageUser", manageUserJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
      }
      else
      {
          JOptionPane.showMessageDialog(this,"Admin already exists","Warning",JOptionPane.WARNING_MESSAGE);
      }
        }
       
    }//GEN-LAST:event_btnCreatePersonActionPerformed

    private void cmbOrganization2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrganization2ActionPerformed
        organization = (Organization) cmbOrganization2.getSelectedItem();
        txtEmployeeAddress.setEditable(true);
        txtName.setEditable(true);
    }//GEN-LAST:event_cmbOrganization2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ExistingAdminAccounts eac = new ExistingAdminAccounts(userProcessContainer, system, enterprise);
        userProcessContainer.add("ManageUser", eac);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblOrganizations.getSelectedRow();
        if(selectedRow>=0){
        Employee emp = (Employee) tblOrganizations.getValueAt(selectedRow, 0);
        UserAccount ua = emp.getUserAccount();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getEmployeeDirectory().getEmployeeList().contains(emp)) {
                org.getUserAccountDirectory().deleteEmployeeUserAccount(ua);
                org.getEmployeeDirectory().deleteEmployee(emp);

            }
          }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a row from the table to be deleted", "Information", JOptionPane.ERROR_MESSAGE);

        }

        populateEmployeeTable();

//         int selectedRow= tblOrganizations.getSelectedRow();
//            UserAccount ua=(UserAccount) tblOrganizations.getValueAt(selectedRow,0);
//            for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
//                if(org.getEmployeeDirectory().getEmployeeList().contains(ua.getEmployee())){
//                    org.getUserAccountDirectory().deleteEmployeeUserAccount(ua);
//                }
//            }
//            populateEmployeeTable();    

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyPressed
       
         char percharacter = evt.getKeyChar();
        if (percharacter >= 65 && percharacter < 90 || percharacter >= 97 && percharacter <= 122 || percharacter == 32 || percharacter == 8) {
            lblAdminNameStatus.setText("");
            txtName.setEditable(true);
            txtName.setBackground(Color.white);
        } else {
            evt.consume();
            lblAdminNameStatus.setText("Admin name can only be alphabetic");
            txtName.setEditable(false);
            txtName.setBackground(Color.yellow);
        }

        
    }//GEN-LAST:event_txtNameKeyPressed

    private void txtNameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNameMouseExited
        lblAdminNameStatus.setText("");
        txtName.setBackground(Color.white);
    }//GEN-LAST:event_txtNameMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePerson;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox cmbOrganization2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAdminNameStatus;
    private javax.swing.JTable tblOrganizations;
    private javax.swing.JTextField txtEmployeeAddress;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
