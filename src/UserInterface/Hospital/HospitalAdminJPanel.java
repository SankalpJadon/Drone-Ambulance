/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Hospital;

import Business.Enterprise.Enterprise;
import Business.Hospital.Hospital;
import Business.Network.Network;
import Business.Organization.HospitalOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.QuickAssist;
import Business.WorkQueue.QuickAssistDoctorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sanka_001
 */
public class HospitalAdminJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    QuickAssist system;
    Enterprise enterprise;
    HospitalOrganization hospitalOrganization;
    Network network;
    QuickAssistDoctorWorkRequest quickAssistRequest;
    double distanceFromPatient;
    Patient recievedPatient;
    Hospital selectedHospital;
    double distance;

    /**
     * Creates new form HospitalReceptionJPanel
     */
    public HospitalAdminJPanel(JPanel userProcessContainer, QuickAssist system, Enterprise enterprise, Network network) {
        initComponents();
        this.setBackground(Color.white);
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.enterprise = enterprise;
        this.network = network;
        populatePatientRequestTable();
        //  populateHospitalTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequest = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHospital = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnSendToHospital = new javax.swing.JButton();
        btnSelectPatient = new javax.swing.JButton();

        tblRequest.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tblRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Address", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequest);
        if (tblRequest.getColumnModel().getColumnCount() > 0) {
            tblRequest.getColumnModel().getColumn(0).setResizable(false);
            tblRequest.getColumnModel().getColumn(1).setResizable(false);
            tblRequest.getColumnModel().getColumn(2).setResizable(false);
            tblRequest.getColumnModel().getColumn(3).setResizable(false);
        }

        tblHospital.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tblHospital.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hospital Name", "Hospital ID", "Distance from Patient"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblHospital);
        if (tblHospital.getColumnModel().getColumnCount() > 0) {
            tblHospital.getColumnModel().getColumn(0).setResizable(false);
            tblHospital.getColumnModel().getColumn(1).setResizable(false);
            tblHospital.getColumnModel().getColumn(2).setResizable(false);
        }

        btnBack.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSendToHospital.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSendToHospital.setText("Send Ambulance to patient");
        btnSendToHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToHospitalActionPerformed(evt);
            }
        });

        btnSelectPatient.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSelectPatient.setText("Select Patient");
        btnSelectPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 927, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSelectPatient)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(207, 207, 207)
                                .addComponent(btnSendToHospital)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSelectPatient)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnSendToHospital))
                .addContainerGap(164, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public double patientHospitalDistance(double hospitalLong, double hospitalLat) {
        double patLongitude = recievedPatient.getLongitude();
        double patLatitude = recievedPatient.getLatitude();
        double hosLongitude = hospitalLong;
        double hosLatitude = hospitalLat;
        double distanceinMiles = droneToPatientDistance(patLongitude, patLatitude, hosLongitude, hosLatitude, "M");
        return distanceFromPatient = distanceinMiles;
    }

    private static double droneToPatientDistance(double lat1, double lon1, double lat2, double lon2, String unit) {
        double theta = lon1 - lon2;
        double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
        dist = Math.acos(dist);
        dist = rad2deg(dist);
        dist = dist * 60 * 1.1515;
        if (unit == "K") {
            dist = dist * 1.609344;
        } else if (unit == "M") {
            dist = dist;
        }

        return (dist);
    }

    private static double deg2rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    private static double rad2deg(double rad) {
        return (rad * 180 / Math.PI);
    }

    public void populateHospitalTable() {
        DefaultTableModel model = (DefaultTableModel) tblHospital.getModel();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof HospitalOrganization) {
                for (Hospital hospital : org.getHospitalDirectory().getHospitalList()) {
                    double hosLongitude = hospital.getLongitude();
                    double hosLatitude = hospital.getLatitude();
                    distance = patientHospitalDistance(hosLongitude, hosLatitude);
                    Object[] row = new Object[3];
                    row[0] = hospital;
                    row[1] = hospital.getHospitalID();
                    row[2] = distance;
                    model.addRow(row);

                }
            }
        }
        tblHospital.setAutoCreateRowSorter(true);
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSelectPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPatientActionPerformed
        int selectedRow = tblRequest.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select desired patient!");
        } else {
            quickAssistRequest = (QuickAssistDoctorWorkRequest) tblRequest.getValueAt(selectedRow, 0);
            quickAssistRequest.setStatus("Assigning Hospital");
            recievedPatient = quickAssistRequest.getPatient();
            populatePatientRequestTable();
             populateHospitalTable();
        }
       
    }//GEN-LAST:event_btnSelectPatientActionPerformed

    private void btnSendToHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToHospitalActionPerformed
        int selectedRow = tblHospital.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the hospital!");
        } else {
            selectedHospital = (Hospital) tblHospital.getValueAt(selectedRow, 0);
            quickAssistRequest.setStatus("Ambulance sent from "+ selectedHospital.getHospitalName()+ "Hospital");
            quickAssistRequest.setHospital(selectedHospital);
            populatePatientRequestTable();
            JOptionPane.showMessageDialog(null, "Ambulance sent from " + selectedHospital.getHospitalName() + " to " + recievedPatient.getFirstName());
            
        }
    }//GEN-LAST:event_btnSendToHospitalActionPerformed
    public void populatePatientRequestTable() {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof HospitalOrganization) {
                hospitalOrganization = (HospitalOrganization) org;
            }
        }

        DefaultTableModel model = (DefaultTableModel) tblRequest.getModel();
        model.setRowCount(0);
        for (WorkRequest request : hospitalOrganization.getWorkQueue().getWorkRequestList()) {

            quickAssistRequest = (QuickAssistDoctorWorkRequest) request;
            Object[] row = new Object[4];
            row[0] = quickAssistRequest;
            row[1] = quickAssistRequest.getPatient().getAddress();
            row[2] = quickAssistRequest.getSender();
            row[3] = quickAssistRequest.getStatus();
            model.addRow(row);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSelectPatient;
    private javax.swing.JButton btnSendToHospital;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblHospital;
    private javax.swing.JTable tblRequest;
    // End of variables declaration//GEN-END:variables
}
