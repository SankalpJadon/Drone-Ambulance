  /*
   * skypeapp.java
   * for CSW4170 - Fall 2006
   *
   * Created on November 11, 2006, 
   * Modified on November 29, 2006
   * Sean White - swhite [at] cs.columbia.edu
   *
   *
   * Requires skype_win32.jar and swing-layout-1.0.jar to run
   * This is a simple example of using the JSkype interface.
   */

package UserInterface.Doctor;

import com.skype.ContactList;
import com.skype.Friend;
import com.skype.Skype;
import com.skype.Call;
import com.skype.Application;
import com.skype.SkypeException;
import com.skype.Stream;
import com.skype.connector.Connector;
import com.skype.connector.win32.Win32Connector;
import com.skype.connector.ConnectorException;
import com.skype.connector.windows.WindowsConnector;



/**
 *
 * @author  Sean White
 */
public class skypeapp extends javax.swing.JFrame implements com.skype.ApplicationListener, com.skype.StreamListener {
    
    /** Creates new form skypeapp */
    
    Application myApp;
    Stream myStream;
    Boolean connected;
    Call myCall;
    
    
    public skypeapp()  {
        initComponents();
        try {
  
            
           
            // Just a quick test to see that it works
            System.out.println(Skype.getVersion());
            
            // This is an example of sending a command directly to the Skype API
            try {
                Connector.getInstance().executeWithId("MESSAGE seanmwhite Hi from UI","CHATMESSAGE");
            } catch (ConnectorException ex) {
                ex.printStackTrace();
            }

            myApp = Skype.addApplication("foo"); // create a new virtual application called "foo"
            myApp.addApplicationListener(this);  // Add this skypeapp as a listener
            connected = false;                   // Flag so we don't connect twice
        } catch (SkypeException ex) {
            ex.printStackTrace();
        }
        

    }
    
    // Two methods for handling connection and disconnection of streams.
    // Required to implement ApplicationListener
     public void connected(Stream stream){
         stream.addStreamListener(this);
         connected = true;
         myStream = stream;
     }
     public void disconnected(Stream stream) {
         stream.removeStreamListener(this);
         connected = false;
         myStream = null;
     }
     
     // Two receiving methods to handle reception of data. Reqiured
     // for implementing StreamListener
    public void datagramReceived(java.lang.String receivedDatagram) {
        // Note that a datagram is not guaranteed to be received.
         jTextArea1.setText(receivedDatagram);
     }
    public void textReceived(java.lang.String receivedText) {
        jTextArea1.setText(receivedText);
    }
 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        friendField = new javax.swing.JTextField();
        messageField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();
        callButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        friendField.setText("user name goes here");

        messageField.setText("Message");

        sendButton.setText("send");
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendButtonMouseClicked(evt);
            }
        });
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("- Press call to call the user.\n- Press connect first to create \nan Ap2Ap connection with the\nuser and then send to send a \nmessage over the Ap2Ap \nconnection.");
        jScrollPane1.setViewportView(jTextArea1);

        connectButton.setText("connect");
        connectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectButtonMouseClicked(evt);
            }
        });

        callButton.setText("call");
        callButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                callButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(friendField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(callButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(connectButton))
                    .add(jScrollPane1)
                    .add(layout.createSequentialGroup()
                        .add(messageField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 182, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sendButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(callButton)
                    .add(connectButton)
                    .add(friendField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(messageField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sendButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void callButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_callButtonMouseClicked
        try {
            myCall = Skype.call(friendField.getText());
           // myCall.getConferenceId()
            
        } catch (SkypeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_callButtonMouseClicked

    private void connectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectButtonMouseClicked
        if (!connected) 
            try {
                // if no connection already, connect to a friend
                // note that they must be in your list
                ContactList myFriends = Skype.getContactList();
                Friend myFriend = myFriends.getFriend(friendField.getText());
                System.out.println(myFriend.getFullName());
                myApp.connect(myFriend);

            } catch (SkypeException ex) {
                ex.printStackTrace();
            }
    }//GEN-LAST:event_connectButtonMouseClicked

    private void sendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendButtonMouseClicked
        //send to connection if present 
        if (myStream != null)           
            try {
                myStream.send(messageField.getText());
            } catch (SkypeException ex) {
                ex.printStackTrace();
            }
        
    }//GEN-LAST:event_sendButtonMouseClicked

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendButtonActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                    new skypeapp().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton callButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField friendField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField messageField;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
    
}
